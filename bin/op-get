#!/usr/bin/env bash

usage() {
    echo "Usage: $0 [-f] [-b bibid ] SOURCE_DIR [DEST_DIR=.]"
    cat <<EOF

Options:
        -b bibid  Provide a bibid for the bibid.txt file
        -f        Force option; for Managed Masters MSS: ignore
                  BibID or missing BibID from MM_Metadata.xlsx.

EOF
}

source `dirname $0`/op-functions

cmd=`basename $0`
COMMAND=$cmd

### OPTIONS
while getopts "hfb:x:" opt; do
  case $opt in
    h)
      usage
      exit 1
      ;;
    b)
      BIBID=$OPTARG
      ;;
    x)
      HOLDING_ID=$OPTARG
      ;;
    f)
      FORCE=true
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### Get the parameters
if [ -d "$1" ]; then
    SOURCE_DIR=`echo $1 | sed 's/\/ *$//'`
    message "Using SOURCE_DIR: $SOURCE_DIR"
else
    error_no_exit "Cannot find SOURCE_DIR: $1" >&2
    error "Please provide a valid SOURCE_DIR" >&2
fi

if [ -n "$2" ]; then
    if [ -d "$2" ]; then
        DEST_DIR=`echo $2 | sed 's/\/ *$//'`
        message "Using DEST_DIR: DEST_DIR"
    else
        error "Cannot find DEST_DIR: $2" >&2
    fi
else
    DEST_DIR=.
fi
message "[$cmd] Using DEST_DIR: $DEST_DIR"

# Get the file system type.
#
# CIFS shares are mounted with fixed permissions. With CIFS mounts, we skip
# steps and options that attempt to change permissions.
#
# awk: NR => number of records or, here, record number; thus: "process the
# second record; i.e, the second line"
# df output is:
#
#   $ df --print-type .
#   Filesystem                                       Type  1K-blocks       Used  Available Use% Mounted on
#   //oceanus.library.upenn.int/tethys_kislakscratch cifs 5368709120 1461052390 3907656730  28% /mnt/scratch02
FS_TYPE=`df -print-type ${DEST_DIR} | awk 'NR==2 { print $2 }'`

junk_files="Thumbs.db sha1manifest.txt .DS_Store"
if [[ -n "$OPENN_JUNK_FILES" ]]; then
    junk_files="$junk_files $OPENN_JUNK_FILES"
fi

# If the user has provided a path ending in a data dir, like
# "/mnt/managedmasters/kislak/mscoll591_f1/data/", strip off data at
# the end for now.
if [[ "$SOURCE_DIR" =~ /data/?$ ]]; then
    message "SOURCE_DIR has data directory"
    SOURCE_DIR=`dirname $SOURCE_DIR`
fi

base=`basename "$SOURCE_DIR"`

# Check to see if SOURCE_DIR is a managed masters directory.
if is_managed_masters_dir "$SOURCE_DIR"; then
    message "SOURCE_DIR $SOURCE_DIR is a Managed Masters directory"
    # First, grab the BibID from MM_Metadata.xlsx
    mm_bibid=`op-bibid $SOURCE_DIR/MM_Metadata.xlsx`
    [[ ! -n "$mm_bibid" ]] && mm_bibid=BIBID_NOT_FOUND
    # Second, change SOURCE_DIR to `/path/to/msXXXX/data`
    SOURCE_DIR="$SOURCE_DIR/data"
fi

if [[ "$FORCE" ]]; then
    warning "Force option selected; ignoring MM_Metadata.xlsx BibID: '$mm_bibid'."
    unset $mm_bibid
elif [[ "$mm_bibid" = "BIBID_NOT_FOUND" ]]; then
    error_no_exit "Found MM_Metadata.xlsx but could not detect BibID; please check manually."
    error "Use force option '-f' to run anyway."
elif [[ -n "$mm_bibid" ]]; then
    message "MM_Metadata.xlsx has BibID '$mm_bibid'."
    if [[ -n "$BIBID" ]] ; then
        if [[ "$BIBID" == "$mm_bibid" ]]; then
            message "OK:    BibID '$BIBID' equals MM_Metadata.xlsx BibID '$mm_bibid'."
        else
            error_no_exit "BibID you provided '$BIBID' does not match MM_Metadata.xlsx BibID '$mm_bibid'." >&2
            error "Use force option '-f' to run anyway."
        fi
    else
        warning "User did not provide bibid; confirm BibID from MM_Metadata.xlsx: '$mm_bibid'."
    fi
fi

# Now see if SOURCE_DIR is valid.
if ! valid_for_opget "$SOURCE_DIR" ; then
    error "ERROR: Whoa! No. I'm not copying '$SOURCE_DIR'."
fi

# The dest is a the DEST_DIR (e.g., '.') + the base (e.g.,
# 'mscodex123')
dest=$DEST_DIR/$base

### DO STUFF
# Copying
message "Copying $SOURCE_DIR to $dest"
rsync_opts="-rltDhv --progress"
# if dir is on a cifs-mounted share, we skip permission options
if [[ $FS_TYPE = cifs ]]
then
  # do nothing
  :
else
  rsync_opts="$rsync_opts --no-p --no-g --chmod=ugo=rwX"
fi
# sync from source to dest: --no-p --no-g --chmod=ugo=rwX => Use umask
rsync $rsync_opts "$SOURCE_DIR"/* $dest

if [ $? -ne 0 ]; then
    error_no_exit "Error copying $SOURCE_DIR to $dest" >&2
fi

# Fixing perms
#
# If dir IS on a cifs-mounted share, we skip changing permissions.
if [[ "$FS_TYPE" = cifs ]]
then
  warning "Drive is on CIFS file system; not changing permissions"
else
  message "Fixing permissions on $dest"
  chmod 775 $dest && find $dest -type d -exec chmod 775 {} \; && find $dest -type f -exec chmod 664 {} \;
  if [ $? -ne 0 ]; then
    error_no_exit "Error setting permissions on $dest" >&2
  fi
fi

# Delete junk
message "Deleting junk files from $dest: $junk_files"
find_opts=
for x in $junk_files;
do
    if [[ -n "$find_opts" ]]; then
        find_opts="$find_opts -o -iname $x"
    else
        find_opts="-iname $x"
    fi
done
find $dest \( $find_opts \) -delete

# Write bibid.txt
bibid_file="$dest"/bibid.txt
if [ -n "$BIBID" ]; then
    message "BibID provided ($BIBID)"
    message "Writing $BIBID to $bibid_file"
    echo $BIBID > "$bibid_file"
elif [[ -n "$mm_bibid" ]]; then
    warning "Creating $bibid_file with BibID from MM_Metadata.xlsx: $mm_bibid"
    echo $mm_bibid > "$bibid_file"
else
    warning "No bibid provided; $bibid_file not created!"
fi

holdingid_file="${dest}/holdingid.txt"
if [[ -n "${HOLDING_ID}" ]]; then
    message "Holding ID provided (${HOLDING_ID})"
    message "Writing ${HOLDING_ID} to ${holdingid_file}"
    echo "${HOLDING_ID}" > "${holdingid_file}"
else
    message "No holding ID provided; ${holdingid_file} not created"
fi
