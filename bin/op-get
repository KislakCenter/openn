#!/usr/bin/env bash

usage() {
    echo "Usage: $0 [-b bibid ] SOURCE_DIR [DEST_DIR=.]"
}

source `dirname $0`/op-functions

cmd=`basename $0`
COMMAND=$cmd

### OPTIONS
while getopts "hb:" opt; do
  case $opt in
    h)
      usage
      exit 1
      ;;
    b)
      BIBID=$OPTARG
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### Get the parameters
if [ -d "$1" ]; then
    SOURCE_DIR=`echo $1 | sed 's/\/ *$//'`
    echo "Using SOURCE_DIR: $SOURCE_DIR"
else
    echo "ERROR: Cannot find SOURCE_DIR: $1" >&2
    echo "ERROR: Please provide a valid SOURCE_DIR" >&2
    usage
    exit 1
fi

if [ -n "$2" ]; then
    if [ -d "$2" ]; then
        DEST_DIR=`echo $2 | sed 's/\/ *$//'`
    else
        echo "ERROR: Cannot find DEST_DIR: $DEST_DIR" >&2
    fi
else
    DEST_DIR=.
fi
echo "[$cmd] Using DEST_DIR: $DEST_DIR"

junk_files="Thumbs.db sha1manifest.txt .DS_Store"
if [[ -n "$OPENN_JUNK_FILES" ]]; then
    junk_files="$junk_files $OPENN_JUNK_FILES"
fi

# If the user has provided a path ending in a data dir, like
# "/mnt/managedmasters/kislak/mscoll591_f1/data/", strip off data at
# the end for now.
if [[ "$SOURCE_DIR" =~ /data/?$ ]]; then
    echo "SOURCE_DIR has data directory"
    SOURCE_DIR=`dirname $SOURCE_DIR`
fi

base=`basename "$SOURCE_DIR"`

# Check to see if SOURCE_DIR is a managed masters directory.
if is_managed_masters_dir "$SOURCE_DIR"; then
    echo "SOURCE_DIR $SOURCE_DIR is a Managed Masters directory"
    SOURCE_DIR="$SOURCE_DIR/data"
fi

# Now see if SOURCE_DIR is valid.
if ! valid_for_opget "$SOURCE_DIR" ; then
    error "ERROR: Whoa! No. I'm not copying '$SOURCE_DIR'."
fi

# The dest is a the DEST_DIR (e.g., '.') + the base (e.g.,
# 'mscodex123')
dest=$DEST_DIR/$base

### DO STUFF
# Copying
echo "[$cmd] Copying $SOURCE_DIR to $dest"
# sync from source to dest: --no-p --no-g --chmod=ugo=rwX => Use umask
rsync -rltDhv --progress --no-p --no-g --chmod=ugo=rwX "$SOURCE_DIR"/* $dest

if [ $? -ne 0 ]; then
    echo "[$cmd] ERROR: Error copying $SOURCE_DIR to $dest" >&2
    exit 1
fi

# Fixing perms
echo "[$cmd] Fixing permissions on $dest"
chmod 775 $dest && find $dest -type d -exec chmod 775 {} \; && find $dest -type f -exec chmod 664 {} \;
if [ $? -ne 0 ]; then
    echo "[$cmd] ERROR: Error setting permissions on $dest" >&2
    exit 1
fi

# Delete junk
echo "[$cmd] Deleting junk files from $dest: $junk_files"
find_opts=
for x in $junk_files;
do
    if [[ -n "$find_opts" ]]; then
        find_opts="$find_opts -o -iname $x"
    else
        find_opts="-iname $x"
    fi
done
find $dest \( $find_opts \) -delete

# Write bibid.txt
bibid_file=$dest/bibid.txt
if [ -n "$BIBID" ]; then
    echo "[$cmd] BibID provided ($BIBID)"
    echo "[$cmd] Writing $BIBID to $bibid_file"
    echo $BIBID > $bibid_file
else
    echo "[$cmd] WARNING: No bibid provided; $bibid_file not created!"
fi
