#!/usr/bin/env sh

export PATH=`dirname $0`/../bin:$PATH

export TEST_DATA_DIR=`dirname $0`/../openn/tests/data
export TEST_STAGING_DIR=`dirname $0`/../openn/tests/staging
export TEST_IMAGE_DIR=$TEST_DATA_DIR/images

# test ENV
export OPENN_DB_NAME=openn_test
export OPENN_DB_USER=openn
export OPENN_DB_HOST=localhost
export OPENN_PACKAGE_DIR=$TEST_STAGING_DIR/openn/packages
export OPENN_STAGING_DIR=$TEST_STAGING_DIR/openn/site
export OPENN_SITE_DIR=$TEST_STAGING_DIR/openn/site
export OPENN_ARCHIVE_DIR=$TEST_STAGING_DIR/openn/archive
export TEMP_FILE=${TMPDIR:-/tmp}/prog$$

TABLES_TO_DELETE="openn_projectmembership openn_project openn_derivative openn_image openn_version openn_prepstatus openn_document"

shunit=`dirname $0`/../shunit2/src/shunit2



clear_tables() {
    for table in $TABLES_TO_DELETE
    do
        mysql -u $OPENN_DB_USER $OPENN_DB_NAME -e "delete from $table"
    done
}

loadDb() {
    this_dir=`dirname $0`
    mysql -u $OPENN_DB_USER --default-character-set=utf8 openn_test < $this_dir/fixtures/test.sql
}

# Usage: get_collection_id COLL_TAG
#
# Print the ID of the collection with tag COLL_TAG.
get_collection_id() {
    gci_tag=${1?get_collection_id - tag required}
    gci_id=`mysql --batch --skip-column-names -u openn $OPENN_DB_NAME -e "select id from openn_openncollection where tag = '$gci_tag'"`
    [[ -z "$gci_id" ]] && return 1
    echo $gci_id
    return 0
}

# Usage: get_project_id PROJ_TAG
#
# Print the ID of the project with tag PROJ_TAG.
get_project_id() {
    gpi_tag=${1?get_project_id - tag required}
    gpi_id=`mysql --batch --skip-column-names -u openn $OPENN_DB_NAME -e "select id from openn_project where tag = '$gpi_tag'"`
    [[ -z "$gpi_id" ]] && return 1
    echo $gpi_id
    return 0
}

# Usage: get_document_id BASE_DIR COLL_TAG
#
# Print the document ID for the document with base_dir BASE_DIR in the
# collection with tag COLL_TAG.
get_document_id() {
    gdi_base_dir=${1?get_document_id - base_dir required}
    gdi_collection_tag=${2?get_document_id - collection_tag required}

    gdi_coll_id=`get_collection_id $gdi_collection_tag`
    gdi_doc_id=`mysql --batch --skip-column-names -u openn $OPENN_DB_NAME -e "select id from openn_document where base_dir = '$gdi_base_dir' and openn_collection_id = $gdi_coll_id"`

    if [[ "$gdi_doc_id" ]]; then
        echo "$gdi_doc_id"
        return 0
    else
        return 1
    fi
}

# Usage: add_membership PROJECT_TAG DOCID
add_project_membership() {
    am_proj_tag=${1?add_membership - PROJECT_TAG required}
    am_docid=${2?add_membership - DOCID required}

    # echo "=== $am_docid"
    am_proj_id=`get_project_id $am_proj_tag`
    today=`date "+%Y-%m-%d"`
    sql="insert into openn_projectmembership"
    sql="$sql (project_id, document_id, created, updated)"
    sql="$sql values ($am_proj_id, $am_docid, '$today', '$today')"
    mysql -u $OPENN_DB_USER $OPENN_DB_NAME -e "$sql"
}

# Usage: insert_document BASE_DIR COLL_TAG
#
# Insert new document with BASE_DIR, linked to collection with tag COLL_TAG.
insert_document() {
    id_base_dir=${1?insert_document - base_dir required}
    id_collection_tag=${2?insert_document - collection_tag required}
    today=`date "+%Y-%m-%d"`
    collection_id=`get_collection_id $id_collection_tag` || {
        echo  "ERROR: $id_collection_tag not in collections table";
        exit 1; }
    sql="insert into openn_document"
    sql="$sql (openn_collection_id, base_dir, is_online, created, updated)"
    sql="$sql values ($collection_id, '$id_base_dir', 0, '$today', '$today')"
    mysql -u $OPENN_DB_USER $OPENN_DB_NAME -e "$sql"
}

print_output() {
  echo "\n====\n$output"
}

assertMatch() {
  aM_msg=
  aM_string=
  aM_pattern=
  aM_match=
  if [ $# -eq 3 ]; then
    aM_msg=$1
    shift
  fi
  aM_string=$1
  aM_pattern=$2

  # the default message
  if [ "$aM_msg" = "" ]; then
    aM_msg="Expected to find '$aM_pattern' in: $aM_string"
  fi

  aM_match=`echo "$aM_string" | grep "$aM_pattern"`
  assertNotNull "$aM_msg" "$aM_match"
}

assertNotMatch() {
  aNM_msg=
  aNM_string=
  aNM_pattern=
  aNM_match=
  if [ $# -eq 3 ]; then
    aNM_msg=$1
    shift
  fi
  aNM_string=$1
  aNM_pattern=$2

  # the default message
  if [ "$aNM_msg" = "" ]; then
    aNM_msg="Expected NOT to find '$aNM_pattern' in: $aNM_string"
  fi

  aNM_match=`echo "$aNM_string" | grep "$aNM_pattern"`
  assertNull "$aNM_msg" "$aNM_match"

}

assertNumberOfMatchingLines() {
  aNoL_msg=
  aNoL_string=
  aNoL_pattern=
  aNoL_count=
  aNoL_actual_count=
  aNoL_match=
  if [ $# -eq 4 ]; then
    aNoL_msg=$1
    shift
  fi
  aNoL_string="$1"
  aNoL_pattern="$2"
  aNoL_count=$3

  aNoL_actual_count=`echo "$aNoL_string" | grep "$aNoL_pattern" | wc -l | sed 's/ //g'`

  # the default message
  if [ "$aNoL_msg" = "" ]; then
    aNoL_msg="Matching lines -- expected: $aNoL_count; found: $aNoL_actual_count; pattern: '$aNoL_pattern'; string:\n$aNoL_string"
  fi

  assertEquals "$aNoL_msg" $aNoL_count $aNoL_actual_count

}
