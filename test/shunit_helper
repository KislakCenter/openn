#!/usr/bin/env sh

export PATH=`dirname $0`/../bin:$PATH

export TEST_DATA_DIR=`dirname $0`/../openn/tests/data
export TEST_STAGING_DIR=`dirname $0`/../openn/tests/staging
export TEST_IMAGE_DIR=$TEST_DATA_DIR/images

# test ENV
export OPENN_DB_NAME=openn_test
export OPENN_DB_USER=openn
export OPENN_DB_HOST=localhost
export OPENN_PACKAGE_DIR=$TEST_STAGING_DIR/openn/packages
export OPENN_STAGING_DIR=$TEST_STAGING_DIR/openn/site
export OPENN_SITE_DIR=$TEST_STAGING_DIR/openn/site
export OPENN_ARCHIVE_DIR=$TEST_STAGING_DIR/openn/archive
export TEMP_FILE=${TMPDIR:-/tmp}/prog$$
export TEMPLATE_TIFF=$TEST_IMAGE_DIR/template_image.tif

# Note that we don't clear openn_curatedcollection and openn_repository. These
# contain what is, effectively, seed data.
TABLES_TO_DELETE="openn_curatedmembership openn_derivative openn_image openn_version openn_prepstatus openn_document openn_sitefile openn_templatehash openn_templatefile"

shunit=`dirname $0`/../shunit2/src/shunit2



clear_tables() {
    for table in $TABLES_TO_DELETE
    do
        mysql -u $OPENN_DB_USER $OPENN_DB_NAME -e "delete from $table"
    done
}

loadDb() {
    this_dir=`dirname $0`
    mysql -u $OPENN_DB_USER --default-character-set=utf8 $OPENN_DB_NAME < $this_dir/fixtures/test.sql
}

# Usage: get_repository_id REPO_TAG
#
# Print the ID of the repository with tag REPO_TAG.
get_repository_id() {
    gci_tag=${1?get_repository_id - tag required}
    echo "mysql --batch --skip-column-names -u $OPENN_DB_USER $OPENN_DB_NAME -e \"select id from openn_repository where tag = '$gci_tag'\""
    gci_id=`mysql --batch --skip-column-names -u $OPENN_DB_USER $OPENN_DB_NAME -e "select id from openn_repository where tag = '$gci_tag'"`
    [[ -z "$gci_id" ]] && return 1
    echo $gci_id
    return 0
}

# Usage: get_curated_collection_id CURATED_TAG
#
# Print the ID of the curated_colection with tag CURATED_TAG.
get_curated_collection_id() {
    gpi_tag=${1?get_curated_collection_id - tag required}
    gpi_id=`mysql --batch --skip-column-names -u $OPENN_DB_USER $OPENN_DB_NAME -e "select id from openn_curatedcollection where tag = '$gpi_tag'"`
    [[ -z "$gpi_id" ]] && return 1
    echo $gpi_id
    return 0
}

# Usage: get_document_id BASE_DIR REPO_TAG
#
# Print the document ID for the document with base_dir BASE_DIR in the
# repository with tag REPO_TAG.
get_document_id() {
    gdi_base_dir=${1?get_document_id - base_dir required}
    gdi_repository_tag=${2?get_document_id - repository_tag required}

    gdi_repo_id=`get_repository_id $gdi_repository_tag`
    gdi_doc_id=`mysql --batch --skip-column-names -u $OPENN_DB_USER $OPENN_DB_NAME -e "select id from openn_document where base_dir = '$gdi_base_dir' and repository_id = $gdi_repo_id"`

    if [[ "$gdi_doc_id" ]]; then
        echo "$gdi_doc_id"
        return 0
    else
        return 1
    fi
}

# Usage; get_a_live_docid
#
# Retrieve a single ID for a live OPenn document
get_a_live_docid() {
  mysql --batch --skip-column-names -u $OPENN_DB_USER $OPENN_DB_NAME -e "select id from openn_document where is_online = 1 limit 1"
}

# Usage; get_a_live_docid
#
# Retrieve a single ID for a live OPenn document
get_a_docid() {
  mysql --batch --skip-column-names -u $OPENN_DB_USER $OPENN_DB_NAME -e "select id from openn_document limit 1"
}

# Usage: add_curated_membership CURATED_TAG DOCID
add_curated_membership() {
    am_curt_tag=${1?add_curated_membership - CURATED_TAG required}
    am_docid=${2?add_curated_membership - DOCID required}

    # echo "=== $am_docid"
    am_curt_id=`get_curated_collection_id $am_curt_tag`
    today=`date "+%Y-%m-%d"`
    sql="insert into openn_curatedmembership"
    sql="$sql (curated_collection_id, document_id, created, updated)"
    sql="$sql values ($am_curt_id, $am_docid, '$today', '$today')"
    mysql -u $OPENN_DB_USER $OPENN_DB_NAME -e "$sql"
}

# Usage: insert_document BASE_DIR REPO_TAG
#
# Insert new document with BASE_DIR, linked to repository with tag REPO_TAG.
insert_document() {
    id_base_dir=${1?insert_document - base_dir required}
    id_repository_tag=${2?insert_document - repository_tag required}
    today=`date "+%Y-%m-%d"`
    repository_id=`get_repository_id $id_repository_tag` || {
        echo  "ERROR: $id_repository_tag not in repositories table";
        exit 1; }
    sql="insert into openn_document"
    sql="$sql (repository_id, base_dir, is_online, created, updated)"
    sql="$sql values ($repository_id, '$id_base_dir', 0, '$today', '$today')"
    mysql -u $OPENN_DB_USER $OPENN_DB_NAME -e "$sql"
}

get_repository_id() {
    gci_tag=${1?get_repository_id - tag required}
    gci_id=`mysql --batch --skip-column-names -u $OPENN_DB_USER $OPENN_DB_NAME -e "select id from openn_repository where tag = '$gci_tag'"`
    [[ -z "$gci_id" ]] && return 1
    echo $gci_id
    return 0
}

get_repository_folder() {
    gcf_id=`get_repository_id $1`
    [[ -z "$gcf_id" ]] && return 1
    printf "%04d\n" $gcf_id
    return 0
}

get_staging_destination() {
    gsd_folder=`get_repository_folder $1`
    gsd_source_dir=$2
    [[ -z "$gsd_folder" ]] && return 1
    [[ -z "$gsd_source_dir" ]] && return 1
    echo $STAGING_DATA_DIR/$gsd_folder/`basename $gsd_source_dir`
    return 0
}

touch_dummy_files() {
    tdf_dest_dir=$1
    tdf_file_list=$2
    if [[ -z "$tdf_dest_dir" ]] || [[ ! -d $tdf_dest_dir ]]; then
        echo "[touch_dummy_files] Directory not found: '$tdf_dest_dir'; quitting"
        exit 1
    fi
    for x in ${!tdf_file_list}; do
        touch "$tdf_dest_dir/$x"
    done
}

create_dummy_files() {
    cdf_dest_dir=$1
    shift
    cdf_file_list=$@
    if [[ -z "$cdf_dest_dir" ]] || [[ ! -d $cdf_dest_dir ]]; then
        echo "[create_dummy_files] Directory not found: '$cdf_dest_dir'; quitting"
        exit 1
    fi
    for x in ${cdf_file_list}; do
        cp "$TEMPLATE_TIFF" "$cdf_dest_dir/$x"
    done
}

# Usage: save_and_open FILE [APP]
#
# Copy the file to TMPDIR and open; optionally specifying the application.
save_and_open() {
  sao_file="${1?save_and_open - FILE required}"
  sao_app="$2"

  sao_base=`basename "$sao_file"`
  sao_tmpfile="${TMPDIR:-/tmp}/${sao_base}"

  cp "$sao_file" "$sao_tmpfile"

  if [[ "$sao_app" ]]; then
    open -a "$sao_app" "$sao_tmpfile"
  else
    open "$sao_tmpfile"
  fi
}

save_and_cat() {
  sac_file="${1?save_and_open - FILE required}"

  sac_base=`basename "$sac_file"`
  sac_tmpfile="${TMPDIR:-/tmp}/${sac_base}"

  cp "$sac_file" "$sac_tmpfile"

  cat "$sac_tmpfile"
  echo ">> catted $sac_tmpfile <<"
}

print_output() {
  echo "\n====\n$output"
}

assertMatch() {
  aM_msg=
  aM_string=
  aM_pattern=
  aM_match=
  if [ $# -eq 3 ]; then
    aM_msg=$1
    shift
  fi
  aM_string=$1
  aM_pattern=$2

  # the default message
  if [ "$aM_msg" = "" ]; then
    aM_msg="Expected to find '$aM_pattern' in: $aM_string"
  fi

  aM_match=`echo "$aM_string" | grep "$aM_pattern"`
  assertNotNull "$aM_msg" "$aM_match"
}

assertNotMatch() {
  aNM_msg=
  aNM_string=
  aNM_pattern=
  aNM_match=
  if [ $# -eq 3 ]; then
    aNM_msg=$1
    shift
  fi
  aNM_string=$1
  aNM_pattern=$2

  # the default message
  if [ "$aNM_msg" = "" ]; then
    aNM_msg="Expected NOT to find '$aNM_pattern' in: $aNM_string"
  fi

  aNM_match=`echo "$aNM_string" | grep "$aNM_pattern"`
  assertNull "$aNM_msg" "$aNM_match"

}

assertNumberOfMatchingLines() {
  aNoL_msg=
  aNoL_string=
  aNoL_pattern=
  aNoL_count=
  aNoL_actual_count=
  aNoL_match=
  if [ $# -eq 4 ]; then
    aNoL_msg=$1
    shift
  fi
  aNoL_string="$1"
  aNoL_pattern="$2"
  aNoL_count=$3

  aNoL_actual_count=`echo "$aNoL_string" | grep "$aNoL_pattern" | wc -l | sed 's/ //g'`

  # the default message
  if [ "$aNoL_msg" = "" ]; then
    aNoL_msg="Matching lines -- expected: $aNoL_count; found: $aNoL_actual_count; pattern: '$aNoL_pattern'; string:\n$aNoL_string"
  fi

  assertEquals "$aNoL_msg" $aNoL_count $aNoL_actual_count

}
